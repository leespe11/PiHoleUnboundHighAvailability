#!/bin/bash
echo "[INFO] Loading environmental variables"
set -a
source config.env

IFS=', ' read -r -a hosts <<< "$HOSTS"
IFS=', ' read -r -a hostnames <<< "$HOSTNAMES"
IFS=', ' read -r -a ssh_usernames <<< "$SSH_USERNAMES"

if [ ${#hosts[@]} -ne ${#hostnames[@]} ] || [ ${#hosts[@]} -ne ${#ssh_usernames[@]} ]; then
    if [ ${#hosts[@]} -gt 1 ] || [ ${#hostnames[@]} -gt 1 ]; then
		echo "[ERR] ARRAY LENGTHS DONT MATCH"
		echo "[ERR] HOSTS, HOSTNAMES, and SSH_USERNAMES environment variables do not match"
		exit 0
	fi
   
fi

if [ "$1" == "" ] || [ $# -gt 1 ] && [ ${#hosts[@]} -ne 1 ]; then
	echo "*** Please make sure you have configured the environment variables in config.env ***"
	echo "---USAGE---"
	echo "./run [server index]|[server name]"
	exit 0
fi

index=-1
STANDALONE=0
if [ ${#hosts[@]} -eq 1 ]; then
  STANDALONE=1
  index=0
else
  for i in "${!hostnames[@]}"; do
    if [ "${hostnames[$i]}" == "$1" ]; then
      index=$i
    fi
  done
fi

if [ $index -lt 0 ] && ! [[ $1 =~ '^[0-9]+$' ]]; then
    if [ $1 -lt "${#hostnames[@]}" ]; then
		  index=$1
    else
        echo "[ERR] Hostname / Host index not found: ${1}"
        exit 0
    fi
elif [ $index -lt 0 ]; then
    echo "[ERR] Hostname not found in list: ${1}"
    exit 0
fi

type=""
if [ $index -eq 0 ]; then
  type="MASTER"
else
  type="BACKUP"
fi

if [ $STANDALONE -eq 0 ]; then
  echo "[INFO] Starting config for $type server: ${hostnames[$index]} on ${hosts[$index]}"
  export DOCKERFILE_NAME=Dockerfile-keepalive
else
  echo "[INFO] Starting STANDALONE server: ${hostnames[$index]} on ${hosts[$index]}"
  export DOCKERFILE_NAME=Dockerfile-standalone
fi

index_plus=$((index + 1))
if [ $index -eq $((${#hosts[@]} - 1)) ]; then
  export SSH_IP="${hosts[0]}"
  export SSH_USER="${ssh_usernames[0]}"
else
  export SSH_IP="${hosts[$index_plus]}"
  export SSH_USER="${ssh_usernames[$index_plus]}"
fi
export LOCAL_IP="${hosts[$index]}"
export LOCAL_USER="${hostnames[$index]}"

################

echo "[INFO] Checking if ./data directory exist"
if [ -d "./data" ];then
	echo "[INFO] Directory ./data exists!"
else 
	echo "[WARN] Directory ./data not found"
	echo "[INFO] Creating: ./data"
	mkdir ./data
fi

echo "[INFO] Checking if ./data/certs directory exist"
if [ -d "./data/certs" ];then
	echo "[INFO] Directory ./data/certs exists!"
else 
	echo "[WARN] Directory ./data/certs not found"
	echo "[INFO] Creating: ./data/certs"
	mkdir ./data/certs
fi
    
CERT_PATH="./data/certs"
SERVER_KEY="$CERT_PATH/server.key"
SERVER_CSR="$CERT_PATH/server.csr"
SERVER_CRT="$CERT_PATH/server.crt"
EXTFILE="config/cert_ext.cnf"
OPENSSL_CMD="/usr/bin/openssl"
	
if [ ! -f $SERVER_KEY ] || [ ! -f $SERVER_CSR ] || [ ! -f $SERVER_CRT ]; then 
	# generating server key
	echo "Generating private key"
	$OPENSSL_CMD genrsa -out $SERVER_KEY  4096 2>/dev/null
	if [ $? -ne 0 ] ; then
		 echo "ERROR: Failed to generate $SERVER_KEY"
		 exit 1
	fi

	## Update Common Name in External File
	sed -i 's/commonName.*/commonName              = '"${LOCAL_USER}"'/' ./config/cert_ext.cnf
	#/bin/echo "commonName              = $COMMON_NAME" >> $EXTFILE

	# Generating Certificate Signing Request using config file
	echo "Generating Certificate Signing Request"
	$OPENSSL_CMD req -new -key $SERVER_KEY -out $SERVER_CSR -config $EXTFILE 2>/dev/null
	if [ $? -ne 0 ] ; then
		 echo "ERROR: Failed to generate $SERVER_CSR"
		 exit 1
	fi


	echo "Generating self signed certificate"
	$OPENSSL_CMD x509 -req -days 3650 -in $SERVER_CSR -signkey $SERVER_KEY -out $SERVER_CRT 2>/dev/null
	if [ $? -ne 0 ] ; then
		 echo "ERROR: Failed to generate self-signed certificate file $SERVER_CRT"
	fi
	cat $SERVER_KEY $SERVER_CRT > $CERT_PATH/server.pem
else
	echo "[INFO] Not creating certificates, files exists"
fi

echo "[INFO] Starting Docker Environment"
docker compose up -d --build #--force-recreate

# workaround for https://github.com/pi-hole/docker-pi-hole/issues/610#issuecomment-922832145
echo "[INFO] Done starting containers"

echo "[INFO] Sleeping 10s before changing pihole permissions"
sleep 10
docker exec pihole /bin/bash -c "chmod 755 -R /etc/pihole/ /etc/dnsmasq.d && chown -R www-data:pihole /etc/pihole/ /etc/dnsmasq.d;"

if [ $STANDALONE -eq 0 ]; then
  apt update && apt install keepalived -y

  systemctl enable keepalived.service

  chmod +x ./config/chk_ftl.sh

  echo "[INFO] Checking if /etc/scripts directory exist"
  if [ -d "/etc/scripts" ];then
    echo "[INFO] Directory /etc/scripts exists!"
  else
    echo "[WARN] Directory /etc/scripts not found"
    echo "[INFO] Creating: /etc/scripts"
    mkdir /etc/scripts
  fi

  cp ./config/chk_ftl.sh /etc/scripts/chk_ftl.sh

  PRIORITY=$((150 - (index * 2)))
echo "global_defs {
	router_id pihole-dns-0$index_plus
	script_user root
	enable_script_security
}

vrrp_script chk_http_port {
	script \"/bin/bash -c \'</dev/tcp/127.0.0.1/80\'\"
	interval 1
	weight 5
}
vrrp_script chk_https_port {
	script \"/bin/bash -c \'</dev/tcp/127.0.0.1/443\'\"
	interval 1
	weight 5
}
vrrp_script chk_dns_port {
	script \"/bin/bash -c \'</dev/tcp/127.0.0.1/53\'\"
	interval 1
	weight 5
}
vrrp_script chk_docker_containerc {
	script \"/bin/bash -c \'/usr/bin/docker ps -q -f name=pihole && /usr/bin/docker exec -it pihole ps ax | grep -v grep | grep pihole-FTL\'\"
	interval 20
	weight -20
}
vrrp_script chk_docker_ftl {
	script \"/bin/bash -c \'/etc/scripts/chk_ftl.sh\'\"
	interval 20
	weight -20
}

vrrp_instance PIHOLE {
	state $type
	interface eth0
	virtual_router_id 55
	priority $PRIORITY
	advert_int 1
	unicast_src_ip $LOCAL_IP
	unicast_peer {
		$SSH_IP
	}

	authentication {
		auth_type PASS
		auth_pass $KEEPALIVE_PASSWD
	}

	virtual_ipaddress {
		$VIRTUAL_IP/24
	}

	track_script {
		chk_http_port
		chk_https_port
		chk_dns_port
		chk_docker_ftl
	}
}" > /etc/keepalived/keepalived.conf

  systemctl restart keepalived.service

  docker exec -it pihole ssh-keygen -t rsa
  docker exec -it pihole ssh-copy-id $SSH_USER@$SSH_IP
fi

echo "[INFO] DONE SETUP"
exit 1